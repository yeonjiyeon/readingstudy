7. 함께 모으기

- 파울러의 세가지 관점(동일한 클래스를 세가지 다른 방향에서 바라보는 것)
1. 개념관점: 설계는 도메인 안에 존재하는 개념과 개념들 사이의 관계를 표현한다.
2. 명세관점: 객체가 협력을 위해 ‘무엇’을 할 수 있는가에 초점을 맞춘다.
3. 구현관점: 객체들이 책임을 수행하는데 필요한 동작하는 코드를 작성하는 것이다.

- 연관관계: 한 타입의 인스턴스가 다른 타입의 인스턴스를 포함하지는 않지만 서로 알고 있어야 할 경우.
- 도메인 모델 : 소프트웨어가 대상으로 하는 영역인 도메인을 단순화해서 표현한 모델.
- 객체가 어떤 메시지를 수신할 수 있다는 것은 그 객체의 인터페이스 안에 메시지에 해당하는 오퍼레이션이 존재한다는 것을 의미함.
- 오퍼레이션은 외부에서 접근 가능한 public으로 선언돼 있어야 한다.
- 인터페이스와 구현을 분리해야한다.

부록
- 분류: 객체의 구체적인 세부 사항을 숨기고 인스턴스 간에 공유하는 공통적인 특성을 기반으로 범주를 형성하는 과정
- 인스턴스화: 분류에서 객체를 생성하는 것
- 타입(심볼 내연 외연)
- 단일분류: 한 객체가 한 시점에 하나의 타입에만 속하는 것
- 다중분류: 한 객체가 한 시점에 여러 타입에 속하는 것
- 동적분류: 객체가 한 집합에서 다른 집합의 원소로 자신이 속하는 타입을 변경 할 수 있는 것.
- 정적분류: 객체가 자신의 타입을 변경할 수 없는 경우
- 일반화: 계층의 상위에 위치한 범주
- 특수화: 계층의 하위에 위치한 범주
- 행위적 순응 = 리스코프 치환 원칙
- 서브타이핑(인터페이스 상속): 서브 클래스가 슈퍼클래스를 대체할 수 있는 경우
- 서브클래싱: 서브클래스가 슈퍼클래스를 대체할 수 없는 경우
- 집합 = 캡술화 메커니즘
- 합성관계는 부분을 전체 안에 캡슐화함으로써 인지 과부화를 방지한다.
- 패키지, 모듈: 클래스 집합을 하나의 논리적인 단위로 묶는 구성 요소
- 패키지는 클래스들을 감춤으로써 시스템의 구조를 추상화 한다,
